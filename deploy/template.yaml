AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy Check CRI Frontend onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  Check Front can be invoked via the public API Gateway on the url in the
  CheckFrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Check Front ECS Service

  Check Front egress to Check API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

  SupportManualURL:
    Type: String
    Default: "https://team-manual.account.gov.uk/teams/CRI-Orange-team/supporting-cri-orange/hmrc-nino-runbook/#frontend-api-alarms"
    Description: The support manual URL to be provided in alarm messages.

  DeployAlarmsInDevEnvironment:
    Description: "Set to the string value `true` to deploy alarms in a DEV environment"
    Type: String
    Default: false

  CodeSigningConfigArn:
    Type: String
    Description: Asserts that lambdas are signed when deployed.
    Default: "none"

  DeploymentStrategy:
    Description: "Predefined deployment configuration for ECS application"
    Type: String
    Default: "None"
    # Allowed values: See https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html

Conditions:
  IsNotDevelopment: !Not
    - !Equals [!Ref Environment, dev]

  IsProduction: !Equals [!Ref Environment, production]

  DeployAlarms: !Or
    - !Condition IsNotDevelopment
    - !Equals [!Ref DeployAlarmsInDevEnvironment, "true"]

  UsePermissionsBoundary: !Not
    - !Equals [!Ref PermissionsBoundary, "none"]
  UseCodeSigning: !Not
    - !Equals [!Ref CodeSigningConfigArn, "none"]
  UseCanaryDeployment: !Not
    - !Equals [!Ref DeploymentStrategy, "None"]

  EnableSpotArmInstance: !Equals [!Ref Environment, dev]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      minECSCount: 1
      maxECSCount: 4
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      minECSCount: 6
      maxECSCount: 60
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      minECSCount: 2
      maxECSCount: 4
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      minECSCount: 2
      maxECSCount: 4
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      minECSCount: 6
      maxECSCount: 60
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

  PlatformConfiguration:
    dev:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    build:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    staging:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    integration:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2
    production:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Check HMRC Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Check HMRC Front load balancer and
        the Check HMRC Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Check HMRC Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Check HMRC Front ECS permits inbound from the Check Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId:
                    !FindInMap [
                      ElasticLoadBalancerAccountIds,
                      !Ref AWS::Region,
                      AccountId,
                    ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/${AWS::StackName}-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub ${AWS::StackName}-${Environment}
        - !Ref AWS::NoValue
      Tags:
        - Key: FMSRegionalPolicy
          Value: false

  LoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  SecondLoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
    # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service and task definition
  EcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - !If [EnableSpotArmInstance, "FARGATE_SPOT", "FARGATE"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Check HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  EcsService:
    Type: AWS::ECS::Service
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3056 # We want to remove load balancers if we are doing canary deployments
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentController:
        Type: !If
          - UseCanaryDeployment
          - CODE_DEPLOY
          - ECS
      DeploymentConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - MaximumPercent: 200
          MinimumHealthyPercent: 50
          DeploymentCircuitBreaker:
            Enable: !If [EnableSpotArmInstance, FALSE, TRUE]
            Rollback: !If [EnableSpotArmInstance, FALSE, TRUE]
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - - ContainerName: app
            ContainerPort: 8080
            TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - !GetAtt ECSSecurityGroup.GroupId
            Subnets:
              - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
              - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      TaskDefinition: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Check HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-Front-ECS
      RetentionInDays: 30

  ECSLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "ECSFatalerror-message"

  ECSFatalErrorAlarm:
    DependsOn:
      - "ECSFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-ECSFatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      InsufficientDataActions: []
      MetricName: ECSFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: []
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # Fargate tasks

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}-${VpceId}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: check-hmrc-cri-api-PrivateApiGatewayId
                  VpceId:
                    Fn::ImportValue: cri-vpc-ExecuteApiGatewayEndpointId
                  Environment: !Ref Environment
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "${AWS::StackName}-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: UA_CONTAINER_ID
              Value: !If [IsProduction, "GTM-TT5HDKV", "GTM-TK92W68"]
            - Name: GA4_CONTAINER_ID
              Value: !If [IsProduction, "GTM-K4PBJH3", "GTM-KD86CMZ"]
            - Name: GA4_ENABLED
              Value: true
            - Name: ANALYTICS_DATA_SENSITIVE
              Value: "false"
            - Name: UA_ENABLED
              Value: false
            - Name: ANALYTICS_COOKIE_DOMAIN
              Value:
                !If [
                  IsProduction,
                  "account.gov.uk",
                  !Sub "${Environment}.account.gov.uk",
                ]
            - Name: LANGUAGE_TOGGLE_DISABLED
              Value: false
          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANT::"
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_TENANTTOKEN::"
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
                - ""
                - - !FindInMap [
                      EnvironmentConfiguration,
                      !Ref Environment,
                      dynatraceSecretArn,
                    ]
                  - ":DT_CONNECTION_POINT::"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub ${AWS::StackName}-${Environment}
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/healthcheck || exit 1 # If a HealthCheck returns a non-zero exit code, then it's considered unhealthy.
            Interval: 10
            Timeout: 2
            Retries: 10 # This ensures that just one healthcheck failure won't cause the container to be drained and replaced.
            StartPeriod: 0
      Cpu: "2048"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: !If [EnableSpotArmInstance, "ARM64", "X86_64"]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Check HMRC CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: DynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt SessionsTable.Arn
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  # Create the VPC Link to join the API Gateway to the
  # private Load Balancer in front of Passport Front ECS
  # Service.
  VpcLink:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Properties:
      Name: ApiGwVpcLinkToLoadBalancer
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
      SecurityGroupIds: []
  ApiGwHttpEndpoint:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub ${AWS::StackName}-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: "1.0"

  APIGWRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: "ANY /{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency"
          }

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-API-GW-AccessLogs
      RetentionInDays: 30

  APIGWLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  APIGWFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref APIGWAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "APIGWFatalerror-message"

  APIGWFatalErrorAlarm:
    DependsOn:
      - "APIGWFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-APIGWFatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      InsufficientDataActions: []
      MetricName: APIGWFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: []
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  CloudFrontWAFv2ACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLArn: !ImportValue cfront-origin-distrib-CloakingOriginWebACLArn

  # ECS Autoscaling

  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity:
        !FindInMap [EnvironmentConfiguration, !Ref Environment, minECSCount]
      MaxCapacity:
        !FindInMap [EnvironmentConfiguration, !Ref Environment, maxECSCount]
      ResourceId: !Sub service/${EcsCluster}/${EcsService.Name}
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSPredictiveScalingPolicy:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSPredictiveScalingPolicy
      PolicyType: PredictiveScaling
      ResourceId: !Sub service/${EcsCluster}/${EcsService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      PredictiveScalingPolicyConfiguration:
        MaxCapacityBreachBehavior: HonorMaxCapacity
        MetricSpecifications:
          - PredefinedMetricPairSpecification:
              PredefinedMetricType: ECSServiceCPUUtilization
            TargetValue: 60
        Mode: ForecastOnly
        SchedulingBufferTime: 600

  StepScaleInPolicy:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: StepScalingInPolicy
      PolicyType: StepScaling
      ResourceId: !Sub service/${EcsCluster}/${EcsService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        StepAdjustments:
          - MetricIntervalUpperBound: -20
            MetricIntervalLowerBound: -40
            ScalingAdjustment: -10
          - MetricIntervalUpperBound: -40
            ScalingAdjustment: -50

  StepScaleOutPolicy:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: StepScalingOutPolicy
      PolicyType: StepScaling
      ResourceId: !Sub service/${EcsCluster}/${EcsService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MinAdjustmentMagnitude: 5
        StepAdjustments:
          - MetricIntervalUpperBound: 20
            ScalingAdjustment: 100
          - MetricIntervalLowerBound: 20
            MetricIntervalUpperBound: 30
            ScalingAdjustment: 200
          - MetricIntervalLowerBound: 30
            MetricIntervalUpperBound: 35
            ScalingAdjustment: 300
          - MetricIntervalLowerBound: 35
            ScalingAdjustment: 500

  StepScaleOutAlarm:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepScaleOutPolicy
      AlarmDescription: !Sub "FrontClusterOver60PercentCPU"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: "2"
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  StepScaleInAlarm:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepScaleInPolicy
      AlarmDescription: !Sub "FrontClusterUnder60PercentCPU"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: "5"
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "5"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "${AWS::StackName}-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  FE5XXErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FE5XXErrorCriticalAlarm"
      AlarmDescription: !Sub "Threshold exceeds 80% with a minimum of at least 5 invocations in 2 out of the last 5 evaluation periods of (15mins each). ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations >= 5, errorPercentage, 0)
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error / invocations) * 100
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 900
            Stat: Sum
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 900
            Stat: Sum

  FE4XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FE4XXErrorAlarm"
      AlarmDescription: !Sub "Error threshold exceeds 5% with a minimum of 150 invocations and a minimum of 2 errors in 2 out of the last 5 minutes. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<150 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations) * 100

  FELatencyAlarmP95:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FELatencyAlarmP95"
      AlarmDescription: !Sub "Trigger the alarm if less than 95% of requests has a latency of more than 1 second with a minimum of 25 invocations in 2 out of the last 5 minutes. ${SupportManualURL}"
      ActionsEnabled: false
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<25,0,latency95Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency95Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p95

  FELatencyAlarmP99:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FELatencyAlarmP99"
      AlarmDescription: !Sub "Trigger the alarm if less than 99% of requests have a latency of more than 2.5 second with a minimum of 150 invocations in 2 out of the last 5 minutes. ${SupportManualURL}"
      ActionsEnabled: false
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 2500
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<150,0,latency99Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency99Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p99

  NoTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmDescription: !Sub "Check HMRC ${Environment} frontend no ECS service tasks. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
        - !ImportValue platform-alarm-critical-alert-topic
      InsufficientDataActions:
        - !ImportValue platform-alarm-warning-alert-topic
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  OnlyOneTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmDescription: !Sub "Check ${Environment} frontend below desired ECS service tasks. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions: []
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 300
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  5XXOnELB:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmDescription: !Sub "Check HRMC ${Environment} frontend 5XX count. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions: []
      InsufficientDataActions: []
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: TargetGroup
          Value: !Ref LoadBalancerListenerTargetGroupECS
        - Name: LoadBalancer
          Value: !Ref LoadBalancer
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  FELowContainerTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FELowContainerTaskCountAlarm"
      AlarmDescription: !Sub "Trigger a warning if the running container task count drops below 2. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: TaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref EcsCluster
            Period: 60
            Stat: Minimum

  FEHighContainerTaskCountWarning:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${Environment}-FEHighContainerTaskCountWarning"
      AlarmDescription: !Sub "Task count reached the auto-scaling maximum for 5 minutes. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-warning-alert-topic
      AlarmActions:
        - !ImportValue platform-alarm-warning-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 13
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: RunningTaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref EcsCluster
                - Name: ServiceName
                  Value: !GetAtt EcsService.Name
            Period: 60
            Stat: Minimum

  FELowContainerTaskCountCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELowContainerTaskCountCriticalAlarm"
      AlarmDescription: !Sub "Critical alert, running container task count droped below 1. ${SupportManualURL}"
      ActionsEnabled: false # to be enabled once proved stable in production
      AlarmActions:
        - !ImportValue platform-alarm-critical-alert-topic
      OKActions:
        - !ImportValue platform-alarm-critical-alert-topic
      InsufficientDataActions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: TaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref EcsCluster
            Period: 60
            Stat: Maximum

  WarningAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: DeployAlarms
    Properties:
      DashboardName: !Sub "${AWS::StackName}-Warning-Alarm-Overview"
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "F2F Front 5XX Error Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FE5XXErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front 4XX Error Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FE4XXErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front Latency Alarm P95 - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELatencyAlarmP95.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front Latency Alarm P99 - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELatencyAlarmP99.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front Low Container Task Count Warning - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELowContainerTaskCountAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 18,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front High Container Task Count Warning - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FEHighContainerTaskCountWarning.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

  CriticalAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: DeployAlarms
    Properties:
      DashboardName: !Sub "${AWS::StackName}-Critical-Alarm-Overview"
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Check HMRC Front Low Container Task Count Critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELowContainerTaskCountCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

  FrontTargetGroup5xxPercentErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: UseCanaryDeployment
    Properties:
      AlarmName: FrontTargetGroup5xxPercentAlarm
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the
        target group is greater than 5% of all traffic.
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: ErrorPercent
          ReturnData: true
          Expression: (m1/m2)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_Target_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: RequestCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum

  ECSBlueGreenDeploymentStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseCanaryDeployment
    Properties:
      TemplateURL: "https://template-storage-templatebucket-1upzyw6v9cs42.s3.eu-west-2.amazonaws.com/ecs-canary-deployment/template.yaml?versionId=5RRU1nfKQD_d08FKttr8W7pzrAsqQiUM"
      Parameters:
        CodeSigningConfigArn: !If
          - UseCodeSigning
          - !Ref CodeSigningConfigArn
          - !Ref AWS::NoValue
        CloudWatchAlarms: !Ref FrontTargetGroup5xxPercentErrors
        ContainerName: app
        ContainerPort: 8080
        DeploymentStrategy: !Ref DeploymentStrategy
        ECSClusterName: !Ref EcsCluster
        ECSServiceName: !GetAtt EcsService.Name
        ECSServiceTaskDefinition: !Ref ECSServiceTaskDefinition
        GreenTargetGroupName: !GetAtt SecondLoadBalancerListenerTargetGroupECS.TargetGroupName
        LoadBalancerListenerARN: !Ref LoadBalancerListener
        PermissionsBoundary:
          Fn::ImportValue: !Sub "${AWS::StackName}-ECSCanaryPermissionsBoundaryArn"
        TGHealthCheckIntervalSeconds: 5
        TGHealthCheckTimeoutSeconds: 2
        TGPort: 8080
        TargetGroupName: !GetAtt LoadBalancerListenerTargetGroupECS.TargetGroupName
        VpcId: !Sub ${VpcStackName}-VpcId

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"

  FrontUrl:
    Description: >-
      The API Gateway URL which Check Front can be invoked on.
    Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint

  FrontGatewayId:
    Description: Check Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-GatewayId"
    Value: !Ref ApiGwHttpEndpoint

  LoadBalancerArn:
    Description: The Fargate Front End Load Balancer ARN
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancer"
    Value: !Ref LoadBalancer
